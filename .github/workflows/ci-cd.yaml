name: Publish VM Production

on:
  push:
    branches:
      - none-existing-branch

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install node
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install Frontend dependencies
        run: |
          npm ci

      - name: Build Frontend project
        run: |
          npm run build

  test:
    runs-on: ubuntu-latest
    needs:
      - build
    services:
      mysql:
        image: mysql:8.0.39
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        env:
          MYSQL_ROOT_PASSWORD: password
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Clone Backend Repository
        uses: actions/checkout@v2
        with:
          repository: niiicolai/kea_car_backend
          path: kea_car_backend

      - name: Install Backend dependencies
        run: |
          cd kea_car_backend
          python -m pip install --upgrade pip
          pip install wheel
          pip install "fastapi[standard]"
          pip install -r requirements.txt

      - name: Create Backend .env file
        run: |
          cd kea_car_backend
          echo "DB_USER=root" > .env
          echo "DB_NAME=kea_cars_test" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_PASSWORD=password" >> .env
          echo "SECRET_KEY=secret" >> .env
          echo "WEATHER_API_KEY=secret" >> .env

      - name: Wait for MySQL to be ready
        run: |
          until mysqladmin ping -h"127.0.0.1" --silent; do
            echo "Waiting for MySQL..."
            sleep 5
          done

      - name: Run Backend SQL Script
        run: |
          mysql -h 127.0.0.1 -u root -p"password" < kea_car_backend/scripts/mysql_for_test.sql

      - name: Start Backend Server
        run: |
          cd kea_car_backend
          fastapi dev main.py &

      - name: Install node
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Create Frontend .env file
        run: echo "VITE_APIURL=http://127.0.0.1:8000/mysql" > .env

      - name: Install Frontend dependencies
        run: |
          npm install

      - name: Run EsLint
        run: |
          npm run lint

      - name: Start Frontend Server
        run: |
          npm run dev &

      - name: Install Cypress
        run: |
          npm install cypress

      - name: Run Cypress tests (E2E)
        run: |
          npx cypress run

  deploy:
    runs-on: ubuntu-latest
    needs: 
      - build
      - test
    steps:
      - uses: actions/checkout@v2

      - name: Create .env file
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - name: SSH and Remove old files
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            rm -rf ${{ secrets.SERVER_LOCATION }}/github/workspace

      - name: SCP files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: "${{ secrets.SERVER_HOST }}"
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "${{ github.workspace }}"
          target: "${{ secrets.SERVER_LOCATION }}"

      - name: SSH and Docker build
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.SERVER_LOCATION }}/github/workspace
            docker build -t ${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} .
            docker-compose -f docker-compose.yaml down
            docker-compose -f docker-compose.yaml up -d
            docker image prune -f
